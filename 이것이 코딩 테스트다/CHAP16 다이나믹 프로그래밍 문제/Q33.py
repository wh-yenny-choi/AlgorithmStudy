'''
Q33 퇴사
오늘부터 N + 1 퇴사하려고 한다. 남은 N일 동안 최대한 많은 상담을 하려고 한다.
각각의 상담은 상담을 완료하는데 걸리는 기간 T와 상담을 했을 때 받을 수 있는 금액 P로 이루어져 있다.
상담을 적절히 했을 때, 얻을 수 있는 최대 수익을 구하는 프로그램을 작성

입력 예시
-----------
7
3 10
5 20
1 10
1 20
2 15
4 40
2 200
-----------
출력 예시 : 45
'''
'''
풀이
날짜를 거꾸로 확인하는 방식으로 접근 -> 다이나믹 프로그래밍 -> 현재 상담 일자의 이윤(p[i]) + 현재 상담을 마친 일자부터의 최대 이윤(dp[t[i] + i]]) 계산
dp[i] = i번째 날부터 마지막 날까지 낼 수 있는 최대 이익
'''
n = int(input())  # 전체 상담 개수
t = []  # 각 상담을 완료하는 데 걸리는 기간
p = []  # 각 상담을 완료했을 때 받을 수 있는 금액
dp = [0] * (n + 1)  # 다이나믹 프로그래밍을 위한 1차원 dp테이블 초기화
max_value = 0

for _ in range(n):
    x, y = map(int, input().split())
    t.append(x)
    p.append(y)

# 리스트를 뒤에서부터 거꾸로 확인
for i in range(n - 1, -1, -1):
    time = t[i] + i
    # 상담이 기간 안에 끝나는 경우
    if time <= n:
        # 점화식에 맞게, 현재까지의 최고 이익 계산
        dp[i] = max(p[i] + dp[time], max_value)
        max_value = dp[i]
    # 상담이 기간을 벗어나는 경우
    else:
        dp[i] = max_value

print(max_value)