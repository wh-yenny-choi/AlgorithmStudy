'''
[실전문제2] 큰 수의 법칙
배열의 크기 N, 숫자가 더해지는 횟수 M, 그리고 K
배열의 특정한 인덱스에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없다.

첫째 줄에 N, M, K의 자연수가 주어지며, 각 자연수는 공백으로 구분
둘재 줄에 N개의 자연수가 주어진다. 각 자연수는 공백으로 구분. 단, 각각 자연수는 1이상 10,000이하의 수로 주어짐
입력으로 주어지는 K는 항상 M보다 작거나 같다.

입력예시
---------------------
5 8 3
2 4 5 4 6
---------------------
출력 예시 : 46
'''
# 입력값 중 가장 큰 수와 두 번째로 큰 수만 저장하면 됨
# 연속으로 더할 수 있는 획수는 최대 K번이므로 '가장 큰 수를 K번 더하고 두 번째로 큰 수를 한 번 더하는 연산' 반복

# N, M, K를 공백으로 구분하여 입력받기
n, m, k = map(int, input().split())
# N개의 수를 공백으로 구분하여 입력받기
data = list(map(int, input().split()))

data.sort()  # 입력받은 수들 정렬하기
first = data[n - 1]  # 가장 큰 수
second = data[n - 2]  # 두 번째로 큰 수

result = 0

while True:
    for i in range(k):  # 가장 큰 수를 K번 더하기
        if m == 0:  # m이 0이라면 반복문 탈출
            break
        result += first
        m -= 1  # 더할 때마다 1씩 빼기
    if m == 0:  # m이 0이라면 반복문 탈출
        break
    result += second
    m -= 1  # 더할 때마다 1씩 빼기

print(result)  # 최종 답안 출력


'''
반복되는 수열에 대해서 파악해야함
---------------------
5 8 3
2 4 5 4 6
---------------------
에서 가장 큰수는 6, 두 번째로 큰 수는 5
이때, M = 8, K = 3일 때 
{6 + 6 + 6 + 5} | {6 + 6 + 6 +  5} 이므로 46

여기서 반복되는 수열의 길이는? (K + 1)
따라서, M을 (K + 1)로 나눈 몫이 수열이 반복되는 횟수. 여기에 K를 곱해주면 가장 큰 수가 등장하는 횟수
이때 M이 (K + 1)로 나누어떨어지지 않는 경우 고려하면, M을 (K + 1)로 나눈 나머지만큼 가장 큰 수가 추가로 더해진다.
즉, '가장 큰 수가 더해지는 횟수'는 
int(M / (K + 1)) * K + M % (K + 1)
'''
# N, M, K를 공백으로 구분하여 입력받기
n, m, k = map(int, input().split())
# N개의 수를 공백으로 구분하여 입력받기
data = list(map(int, input().split()))

data.sort()  # 입력받은 수 정렬
first = data[n - 1]  # 가장 큰 수
second = data[n - 2]  # 두 번째로 큰 수

# 가장 큰 수가 더해지는 횟수 계산
count = int(m / (k + 1)) * k
count += m % (k + 1)

result = 0
result += (count) * first  # 가장 큰 수 더하기
result += (m - count) * second  # 두 번째로 큰 수 더하기

print(result)  # 최종 답안 출력