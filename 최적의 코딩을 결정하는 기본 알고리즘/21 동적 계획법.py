# 피보나치 수열 : 단순 재귀 소스코드
# 피보나치 함수 (Fibonacci Function)을 재귀함수로 구현
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)

print(fibo(4))

# 피보나치 수열 : 탑다운 다이나믹 프로그래밍 소스코드
# 한 번 계산된 결과를 메모이제이션(memoization)하기 위한 초기화
d = [0] * 100  # 각 인덱스 값 0으로 초기화, 리스트 크기를 100으로 설정 (이 예제에서 99번째 피보나치 수 구하기 때문)

# 피보나치 함수 (Fibonacci Function)을 재귀함수로 구현 (탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건 (1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서  피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)  # 점화식 결과를 리스트에 반환
    return d[x]

print(fibo(99))

# 피보나치 수열 : 보텀업 다이나믹 프로그래밍 소스코드
# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1 (종료식 대신 초기화)
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수 반복문으로 구현 (보텀업 다이나믹 프로그래밍)
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]  # 점화식 그대로 기입하여 작은 문제부터 해결, 조합 > 큰문제로 차례대로 구현

print(d[n])


# 피보나치 수열 : 메모이제이션 동작 분석
# 메모이제이션을 이용하는 경우 피보나치 수열 함수의 시간 복잡도는 O(N)입니다
d = [0] * 100

def fibo(x):
    print('f(' + str(x) + ')', end=' ')
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]

fibo(6)
# <f(6) f(5) f(4) f(3) f(2) f(1) f(2) f(3) f(4) >